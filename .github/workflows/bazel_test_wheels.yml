# CI - Bazel wheel tests (RBE)
#
# This workflow is triggered in the presubmit.
#
# It consists of the following jobs:
# build-jax-artifact:
#    - Builds the jax artifact from source via build.py invocation. Uses build_artifacts.yml.
# build-jaxlib-artifact:
#    - Builds the jaxlib artifact from source via build.py invocation. Uses build_artifacts.yml.
# run-bazel-test-cpu-py-import:
#    - Runs the Bazel CPU tests with py_import dependencies. Uses bazel_cpu_rbe_no_jaxlib_build.yml.

name: CI - Bazel wheel tests (RBE)

on:
  workflow_dispatch:
    inputs:
      halt-for-connection:
        description: 'Should this workflow run wait for a remote connection?'
        type: choice
        required: true
        default: 'no'
        options:
        - 'yes'
        - 'no'
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
      - 'release/**'
permissions: {}
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  # Don't cancel in-progress jobs for main/release branches.
  cancel-in-progress: ${{ !contains(github.ref, 'release/') && github.ref != 'main' }}

jobs:
  build-cpu-wheels:
    uses: ./.github/workflows/bazel_build_wheels.yml
    name: "Build JAX CPU wheels"
    strategy:
        fail-fast: false # don't cancel all jobs on failure
        matrix:
          # Runner OS and Python values need to match the matrix stategy in the CPU tests job
          runner: ["linux-x86-n2-16", "linux-arm64-c4a-16", "windows-x86-n2-16"]
          python: ["3.11"]
          artifact: ["jax", "jaxlib"]
    with:
        runner: ${{ matrix.runner }}
        python: ${{ matrix.python }}
        artifact: ${{ matrix.artifact }}
        upload_artifacts_to_gcs: false

  build-gpu-wheels:
    uses: ./.github/workflows/bazel_build_wheels.yml
    name: "Build JAX GPU wheels"
    strategy:
        fail-fast: false # don't cancel all jobs on failure
        matrix:
          # Runner OS and Python values need to match the matrix stategy in the CPU tests job
          runner: ["linux-x86-n2-16", "linux-arm64-c4a-16"]
          python: ["3.11"]
          artifact: ["jax-cuda-plugin", "jax-cuda-pjrt"]
    with:
        runner: ${{ matrix.runner }}
        python: ${{ matrix.python }}
        artifact: ${{ matrix.artifact }}
        upload_artifacts_to_gcs: false

  # build-jax-artifact:
  #   uses: ./.github/workflows/build_artifacts.yml
  #   name: "Build jax artifact"
  #   with:
  #       # Note that since jax is a pure python package, the runner OS and Python values do not
  #       # matter. In addition, cloning main XLA also has no effect.
  #       runner: "linux-x86-n2-16"
  #       artifact: "jax"
  #       upload_artifacts_to_gcs: false

  # build-jaxlib-artifact:
  #   uses: ./.github/workflows/build_artifacts.yml
  #   strategy:
  #       fail-fast: false # don't cancel all jobs on failure
  #       matrix:
  #           # Runner OS and Python values need to match the matrix stategy in the CPU tests job
  #           runner: ["linux-x86-n2-16", "linux-arm64-c4a-16", "windows-x86-n2-16"]
  #           artifact: ["jaxlib"]
  #           python: ["3.11"]
  #   # Note: For reasons unknown, Github actions groups jobs with the same top-level name in the
  #   # dashboard only if we use an expression in the "name" field. Otherwise, it appends the matrix
  #   # values to the name and creates a separate entry for each matrix combination.
  #   name: "Build ${{ format('{0}', 'jaxlib') }} artifacts"
  #   with:
  #       runner: ${{ matrix.runner }}
  #       artifact: ${{ matrix.artifact }}
  #       python: ${{ matrix.python }}
  #       clone_main_xla: 1
  #       upload_artifacts_to_gcs: false

  run-bazel-test-cpu-py-import:
    uses: ./.github/workflows/bazel_cpu_rbe_no_jaxlib_build.yml
    strategy:
        fail-fast: false # don't cancel all jobs on failure
        matrix:
          runner: ["linux-x86-n2-16", "linux-arm64-c4a-16", "windows-x86-n2-16"]
          python: ["3.11"]
          enable-x64: [0]
    name: "Bazel CPU tests with ${{ format('{0}', 'build_jaxlib=wheel') }}"
    with:
      runner: ${{ matrix.runner }}
      python: ${{ matrix.python }}
      enable-x64:  ${{ matrix.enable-x64 }}
      build_jaxlib: "wheel"
      run-backend_independent-test-suite: "0"
